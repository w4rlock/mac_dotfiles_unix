" vimrc
"
"


" Author: Zaiste! <oh@zaiste.net>
" Source: https://github.com/zaiste/vimified
"
" Have fun!
"
"
set nocompatible
filetype on
filetype off

let s:dotvim = fnamemodify(globpath(&rtp, 'vimified.dir'), ':p:h')

" Utils
exec ':so '.s:dotvim.'/functions/util.vim'
"

" Load external configuration before anything else
let s:beforerc = expand(s:dotvim . '/before.vimrc')
if filereadable(s:beforerc)
    exec ':so ' . s:beforerc
endif
"

let mapleader = ","
let maplocalleader = "\\"

" Local vimrc configuration
let s:localrc = expand(s:dotvim . '/local.vimrc')
if filereadable(s:localrc)
    exec ':so ' . s:localrc
endif
"

" PACKAGE LIST
" Use this variable inside your local configuration to declare
" which package you would like to include
if ! exists('g:vimified_packages')
    let g:vimified_packages = ['general', 'fancy', 'os', 'coding', 'ruby', 'html', 'css', 'js', 'clojure', 'haskell', 'color']
endif
"

call plug#begin('~/.vim/plugged')


" PACKAGES

" Install user-supplied Bundles
let s:extrarc = expand(s:dotvim . '/extra.vimrc')
if filereadable(s:extrarc)
    exec ':so ' . s:extrarc
endif
"

" _. General
if count(g:vimified_packages, 'general')
    Plug 'jremmen/vim-ripgrep'
    let g:rg_command = 'rg --vimgrep -S'

    Plug 'editorconfig/editorconfig-vim'
    Plug 'voldikss/vim-floaterm'
    Plug 'mhinz/vim-startify'
    Plug 'ryanoasis/vim-devicons'
    Plug 'junegunn/vim-easy-align'
    Plug 'tpope/vim-endwise'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-speeddating'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-unimpaired'
    Plug 'maxbrunsfeld/vim-yankstack'
    Plug 'tpope/vim-eunuch'

    Plug 'junegunn/fzf', { 'do': './install --bin' }
    Plug 'junegunn/fzf.vim'
    "Plug 'voldikss/fzf-floaterm'

    Plug 'airblade/vim-gitgutter'
    Plug 'easymotion/vim-easymotion'
    "bug with conceal
    "Plug 'Yggdroot/indentLine'
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'

    Plug 'pangloss/vim-javascript'
    "Plug 'heavenshell/vim-jsdoc'

    " No trabaja con arrows
    "Plug 'joegesualdo/jsdoc.vim'

    " no funciona en la version 8
    Plug 'heavenshell/vim-jsdoc', {
      \ 'for': ['javascript', 'javascript.jsx','typescript'],
      \ 'do': 'make install'
    \}
    Plug 'nathanaelkane/vim-indent-guides'
    Plug 'prettier/vim-prettier', { 'do': 'yarn install', 'branch': 'release/0.x' }
    Plug 'dense-analysis/ale'



    let g:jsdoc_allow_input_prompt = 1
    let g:jsdoc_input_description = 1
    let g:jsdoc_enable_es6 = 1

    "NeoVim intelligence
    "Plug 'neoclide/coc.nvim', {'branch': 'release'}
    "Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
    Plug 'Valloric/YouCompleteMe', { 'do': './install.py --ts-completer' }
    Plug 'preservim/nerdtree'
    Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

    " Disable the scrollbars (NERDTree)
    set guioptions-=r
    set guioptions-=L
    " Keep NERDTree window fixed between multiple toggles
    set winfixwidth


    Plug 'kana/vim-textobj-user'
    Plug 'vim-scripts/YankRing.vim'
    let g:yankring_replace_n_pkey = '<leader>['
    let g:yankring_replace_n_nkey = '<leader>]'
    let g:yankring_history_dir =   expand(s:dotvim . '/temp')

    nmap <leader>y :YRShow<cr>

    Plug 'michaeljsmith/vim-indent-object'
    let g:indentobject_meaningful_indentation = ["haml", "sass", "python", "yaml", "markdown"]

    Plug 'Spaceghost/vim-matchit'
    Plug 'vim-scripts/scratch.vim'
    Plug 'terryma/vim-multiple-cursors'
endif
"

" _. Fancy
if count(g:vimified_packages, 'fancy')
    "call g:Check_defined('g:airline_left_sep', '')
    "call g:Check_defined('g:airline_right_sep', '')
    "call g:Check_defined('g:airline_branch_prefix', '')

    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
endif
"


" _. OS
if count(g:vimified_packages, 'os')
    Plug 'zaiste/tmux.vim'
    Plug 'benmills/vimux'
    map <Leader>rp :VimuxPromptCommand<CR>
    map <Leader>rl :VimuxRunLastCommand<CR>

    map <LocalLeader>d :call VimuxRunCommand(@v, 0)<CR>
    au! BufNewFile,BufRead /tmp/bash-fc* setfiletype sh

endif
"

" _. Coding

if count(g:vimified_packages, 'coding')
    "Plug 'majutsushi/tagbar'
    "nmap <leader>t :Vista!!<CR>
    "Plug 'liuchengxu/vista.vim'

    Plug 'gregsexton/gitv'

    "Plug 'joonty/vdebug.git'

    Plug 'scrooloose/nerdcommenter'
    nmap <leader># :call NERDComment(0, "invert")<cr>
    vmap <leader># :call NERDComment(0, "invert")<cr>

    " - Plug 'msanders/snipmate.vim'
    Plug 'sjl/splice.vim'

    Plug 'tpope/vim-fugitive'
    nmap <leader>gs :Gstatus<CR>
    nmap <leader>gc :Gcommit -v<CR>
    nmap <leader>gac :Gcommit --amen -v<CR>
    nmap <leader>g :Rg
    nmap <leader>x :AirlineTheme random<CR>
    " ,f for global git search for word under the cursor (with highlight)
    "nmap <leader>f :let @/="\\<<C-R><C-W>\\>"<CR>:set hls<CR>:silent Ggrep -w "<C-R><C-W>"<CR>:ccl<CR>:cw<CR><CR>
    nmap <leader>f :let @/="\\<<C-R><C-W>\\>"<CR>:set hls<CR>:silent Rg "<C-R><C-W>"<CR>"
    " same in visual mode
    :vmap <leader>f y:let @/=escape(@", '\\[]$^*.')<CR>:set hls<CR>:silent Ggrep -F "<C-R>=escape(@", '\\"#')<CR>"<CR>:ccl<CR>:cw<CR><CR>

    "Plug 'scrooloose/syntastic'
    "let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': ['ruby', 'python', ], 'passive_filetypes': ['html', 'css', 'slim'] }

    " --

    autocmd FileType gitcommit set tw=68 spell
    autocmd FileType gitcommit setlocal foldmethod=manual

    " Check API docs for current word in Zeal: http://zealdocs.org/
    nnoremap <leader>d :!zeal --query "<cword>"&<CR><CR>
endif
"



" _. Python
if count(g:vimified_packages, 'python')
    Plug 'klen/python-mode'
    Plug 'python.vim'
    Plug 'python_match.vim'
    Plug 'pythoncomplete'
    Plug 'jmcantrell/vim-virtualenv'
endif


" _. Go
if count(g:vimified_packages, 'go')
    Plug 'fatih/vim-go'
    let g:go_disable_autoinstall = 1
endif
"

" _. HTML
if count(g:vimified_packages, 'html')
    Plug 'tpope/vim-haml'
    Plug 'juvenn/mustache.vim'
    Plug 'tpope/vim-markdown'
    Plug 'digitaltoad/vim-jade'
    Plug 'slim-template/vim-slim'

    au BufNewFile,BufReadPost *.jade setl shiftwidth=2 tabstop=2 softtabstop=2 expandtab
    au BufNewFile,BufReadPost *.html setl shiftwidth=2 tabstop=2 softtabstop=2 expandtab
    au BufNewFile,BufReadPost *.slim setl shiftwidth=2 tabstop=2 softtabstop=2 expandtab
    au BufNewFile,BufReadPost *.md set filetype=markdown

    let g:markdown_fenced_languages = ['coffee', 'css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'html']
endif
"

" _. CSS
if count(g:vimified_packages, 'css')
    Plug 'wavded/vim-stylus'
    Plug 'lunaru/vim-less'
    nnoremap ,m :w <BAR> !lessc % > %:t:r.css<CR><space>
endif
"

" _. JS
if count(g:vimified_packages, 'js')
    Plug 'kchmck/vim-coffee-script'
    au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 tabstop=2 softtabstop=2 expandtab

    Plug 'alfredodeza/jacinto.vim'
    au BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
    au BufNewFile,BufReadPost *.coffee setl tabstop=2 softtabstop=2 shiftwidth=2 expandtab
endif
"

" _. Clojure
if count(g:vimified_packages, 'clojure')
    Plug 'guns/vim-clojure-static'
    Plug 'tpope/vim-fireplace'
    Plug 'tpope/vim-classpath'
endif
"
" _. Haskell
if count(g:vimified_packages, 'haskell')
    Plug 'Twinside/vim-syntax-haskell-cabal'
    Plug 'lukerandall/haskellmode-vim'

    au BufEnter *.hs compiler ghc

    let g:ghc = "/usr/local/bin/ghc"
    let g:haddock_browser = "open"
endif
"

" _. Elixir
if count(g:vimified_packages, 'elixir')
    Plug 'elixir-lang/vim-elixir'
endif
"

" _. Rust
if count(g:vimified_packages, 'rust')
    Plug 'wting/rust.vim'
endif
"

" _. Elm
if count(g:vimified_packages, 'elm')
    Plug 'lambdatoast/elm.vim'
endif
"

" _. Color
if count(g:vimified_packages, 'color')
    Plug 'morhetz/gruvbox'
    Plug 'sjl/badwolf'
    Plug 'altercation/vim-colors-solarized'
    Plug 'tomasr/molokai'
    Plug 'zaiste/Atom'
    Plug 'w0ng/vim-hybrid'
    Plug 'chriskempson/base16-vim'
    Plug 'Elive/vim-colorscheme-elive'
    Plug 'zeis/vim-kolor'
    Plug 'xero/sourcerer.vim'

    " During installation the molokai colorscheme might not be avalable
    if filereadable(globpath(&rtp, 'colors/molokai.vim'))
      colorscheme badwolf
    else
      colorscheme default
    endif
else
    colorscheme default
endif
call plug#end()
"

"

" General
filetype plugin indent on

syntax on

" Set 5 lines to the cursor - when moving vertically
set scrolloff=0

" It defines where to look for the buffer user demanding (current window, all
" windows in other tabs, or nowhere, i.e. open file from scratch every time) and
" how to open the buffer (in the new split, tab, or in the current window).

" This orders Vim to open the buffer.
set switchbuf=useopen

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'


nnoremap   <silent>   <F7>    :FloatermNew<CR>
tnoremap   <silent>   <F7>    <C-\><C-n>:FloatermNew<CR>
nnoremap   <silent>   <F8>    :FloatermPrev<CR>
tnoremap   <silent>   <F8>    <C-\><C-n>:FloatermPrev<CR>
nnoremap   <silent>   <F9>    :FloatermNext<CR>
tnoremap   <silent>   <F9>    <C-\><C-n>:FloatermNext<CR>
nnoremap   <silent>   <F12>   :FloatermToggle<CR>
tnoremap   <silent>   <F12>   <C-\><C-n>:FloatermToggle<CR>
"

" Mappings

" You want to be part of the gurus? Time to get in serious stuff and stop using
" arrow keys.
noremap <left> <nop>
noremap <up> <nop>
noremap <down> <nop>
noremap <right> <nop>

" Yank from current cursor position to end of line
map Y y$
" Yank content in OS's clipboard. `o` stands for "OS's Clipoard".
vnoremap <leader>yo "*y

" Paste content from OS's clipboard
nnoremap <leader>po "*p


" clear highlight after search
noremap <silent><Leader>/ :nohls<CR>

" better ESC
inoremap <C-k> <Esc>

nmap <silent> <leader>hh :set invhlsearch<CR>
nmap <silent> <leader>ll :set invlist<CR>
nmap <silent> <leader>nn :set invnumber<CR>
nmap <silent> <leader>pp :set invpaste<CR>
nmap <silent> <leader>ii :set invrelativenumber<CR>




" Seriously, guys. It's not like :W is bound to anything anyway.
command! W :w

" Emacs bindings in command line mode
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" Source current line
vnoremap <leader>L y:execute @@<cr>
" Source visual selection
nnoremap <leader>L ^vg_y:execute @@<cr>

" . abbrevs
"
iabbrev z@ oh@zaiste.net

" .

" Settings
set autoread
set backspace=indent,eol,start
set binary
set cinoptions=:0,(s,u0,U1,g0,t0
set completeopt=menuone,preview
set encoding=utf-8
set hidden
set history=1000
set incsearch
set laststatus=2
set list

" Don't redraw while executing macros
set nolazyredraw

" Disable the macvim toolbar
set guioptions-=T

"set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮,trail:␣
set listchars=tab:▸\ ,extends:❯,precedes:❮,trail:␣
set showbreak=↪

set switchbuf+=usetab,newtab

set notimeout
set ttimeout
set ttimeoutlen=10

" _ backups
if has('persistent_undo')
  " undo files
  exec 'set undodir='.s:dotvim.'tmp/undo//'
  set undofile
  set undolevels=3000
  set undoreload=10000
endif
" backups
exec 'set backupdir='.s:dotvim.'/temp/backup/'
" swap files
"
"set backupdir=expand(s:dotvim . '/temp/backup/')
"set directory=expand(s:dotvim . '/temp/swap/')
exec 'set directory='.s:dotvim.'/temp/swap/'
set backup
set noswapfile
" _

set modelines=0
set noeol
set relativenumber
"set number
set numberwidth=10
set modeline
set modelines=3
set ruler                                     " show the cursor position all the time
set scrolloff=5                               " scroll off vertical
set sidescrolloff=5                           " scroll off horizontal
set winwidth=83
if executable('zsh')
  set shell=zsh\ -l
endif
set showcmd

set exrc
set secure

set matchtime=2

set completeopt=longest,menuone,preview

" White characters
set autoindent
set tabstop=2
set softtabstop=0 expandtab
set textwidth=80
set shiftwidth=2
set expandtab
set wrap
set formatoptions=qrn1
if exists('+colorcolumn')
  set colorcolumn=+1
endif
set cpo+=J
"

set visualbell

set wildignore=.svn,CVS,.git,.hg,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,.DS_Store,*.aux,*.out,*.toc,tmp,*.scssc
set wildmenu

set dictionary=/usr/share/dict/words
"

" Triggers

" Save when losing focus
au FocusLost    * :silent! wall
"
" When vimrc is edited, reload it
autocmd! BufWritePost vimrc source $MYVIMRC

"

" Cursorline
" Only show cursorline in the current window and in normal mode.
"augroup cline
    "au!
    "au WinLeave * set nocursorline
    "au WinEnter * set cursorline
    "au InsertEnter * set nocursorline
    "au InsertLeave * set cursorline
"augroup END


" Trailing whitespace
" Only shown when not in insert mode so I don't go insane.
augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:␣
    au InsertLeave * :set listchars+=trail:␣
augroup END

" Remove trailing whitespaces when saving
" Wanna know more? http://vim.wikia.com/wiki/Remove_unwanted_spaces
" If you want to remove trailing spaces when you want, so not automatically,
" see
" http://vim.wikia.com/wiki/Remove_unwanted_spaces#Display_or_remove_unwanted_whitespace_with_a_script.
autocmd BufWritePre * :%s/\s\+$//e

"

" . searching

" sane regexes
nnoremap / /\v
vnoremap / /\v

set ignorecase
set smartcase
set showmatch
set gdefault
set hlsearch
set cursorline

" clear search matching
noremap <leader><space> :noh<cr>:call clearmatches()<cr>

" Don't jump when using * for search
nnoremap * *<c-o>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz

" Open a Quickfix window for the last search.
nnoremap <silent> <leader>? :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

" Highlight word

nnoremap <silent> <leader>hh :execute 'match InterestingWord1 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h1 :execute 'match InterestingWord1 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h2 :execute '2match InterestingWord2 /\<<c-r><c-w>\>/'<cr>
nnoremap <silent> <leader>h3 :execute '3match InterestingWord3 /\<<c-r><c-w>\>/'<cr>

"

"

" Navigation & UI

" more natural movement with wrap on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Easy splitted window navigation
noremap <C-h>  <C-w>h
noremap <C-j>  <C-w>j
noremap <C-k>  <C-w>k
noremap <C-l>  <C-w>l


" Splits ,v and ,h to open new splits (vertical and horizontal)
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>h <C-w>s<C-w>j

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Bubbling lines
nmap <C-Up> [e
nmap <C-Down> ]e
vmap <C-Up> [egv
vmap <C-Down> ]egv

nmap <tab> :NERDTreeToggle<cr>

"

nmap vq :q!<cr>
set pastetoggle=<F2>
" . folding

set foldenable
set foldmethod=indent
set foldlevelstart=0
"set foldmethod=syntax

" Space to toggle folds.
nnoremap <space> za
vnoremap <space> za

" Make zO recursively open whatever top level fold we're in, no matter where the
" cursor happens to be.
nnoremap zO zCzO

" Use ,z to "focus" the current fold.
nnoremap <leader>z zMzvzz

"

" Quick editing

"nnoremap <leader>ev <C-w>s<C-w>j:e $MYVIMRC<cr>
"exec 'nnoremap <leader>es <C-w>s<C-w>j:e '.s:dotvim.'/snippets/<cr>'
"nnoremap <leader>eg <C-w>s<C-w>j:e ~/.gitconfig<cr>
"nnoremap <leader>ez <C-w>s<C-w>j:e ~/.zshrc<cr>
"nnoremap <leader>et <C-w>s<C-w>j:e ~/.tmux.conf<cr>

" --------------------

set ofu=syntaxcomplete#Complete

" showmarks
let g:showmarks_enable = 1
hi! link ShowMarksHLl LineNr
hi! link ShowMarksHLu LineNr
hi! link ShowMarksHLo LineNr
hi! link ShowMarksHLm LineNr

map <Leader> <Plug>(easymotion-prefix)
nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)

map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)
"

" _ Vim
augroup ft_vim
    au!
    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END
"

" EXTENSIONS
exec ':so '.s:dotvim.'/functions/scratch_toggle.vim'
exec ':so '.s:dotvim.'/functions/insert_tab_wrapper.vim'
exec ':so '.s:dotvim.'/functions/my_fold_text.vim'

"

" _. Gist
" Send visual selection to gist.github.com as a private, filetyped Gist
" Requires the gist command line too (brew install gist)
vnoremap <leader>G :w !gist -p -t %:e \| pbcopy<cr>
"

"


"TABS MAPPINGS
map <silent> tl :tabnext<CR>
map <silent> th :tabprev<CR>
map <silent> tn :tabnew<CR>
map <silent> td :tabclose<CR>




" Load addidional configuration (ie to overwrite shorcuts)
let s:afterrc = expand(s:dotvim . '/after.vimrc')
if filereadable(s:afterrc)
    exec ':so ' . s:afterrc
endif
"
"
set fillchars=vert:\│
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 0
let g:airline_detect_modified = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tabs_label = ' '
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#show_buffers = 0
let g:tender_airline = 1
"let g:airline_theme = "powerlineish"
"let g:airline_theme = "hybrid"
let g:airline_theme = "minimalist"

set encoding=utf-8 " Necessary to show unicode glyphs

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif



" Files + devicons
function! Fzf_dev()
  let l:fzf_files_options = '
        \ --prompt=" "
        \ --layout="default"
        \ --color=16
        \ --preview "bat -p --color=always {2..-1} | head -'.&lines.'"'

  function! s:files()
    let l:files = split(system($FZF_DEFAULT_COMMAND), '\n')
    return s:prepend_icon(l:files)
  endfunction

  function! s:prepend_icon(candidates)
    let l:result = []
    for l:candidate in a:candidates
      let l:filename = fnamemodify(l:candidate, ':p:t')
      let l:icon = WebDevIconsGetFileTypeSymbol(l:filename, isdirectory(l:filename))
      call add(l:result, printf('%s  %s', l:icon, l:candidate))
    endfor

    return l:result
  endfunction

  function! s:edit_file(item)
    let l:pos = stridx(a:item, ' ')
    let l:file_path = a:item[pos+1:-1]
    execute 'silent tabnew' l:file_path
  endfunction

  call fzf#run({
        \ 'source': <sid>files(),
        \ 'sink':   function('s:edit_file'),
        \ 'options': '-m ' . l:fzf_files_options,
        \ 'down':    '80%' })
endfunction
"custom fzf + web icons support
nmap <silent> f; :call Fzf_dev()<cr>

let g:gitgutter_highlight_lines = 0
let g:gitgutter_realtime = 1
let g:gitgutter_eager = 0
"let g:gitgutter_override_sign_column_highlight = 0


let g:indentLine_char = '┊'
let g:indentLine_bgcolor_term = 232
let g:indentLine_enabled = 0
"let g:indentLine_enabled = 1
let g:indentLine_setConceal = 0
"let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 1



"colorscheme elive
"colorscheme sourcerer
"colorscheme molokai
colorscheme badwolf


"easy motion
",s <char_target>
",s
",w
",b
"
"conceal t- replace code by icons
set conceallevel=2
set concealcursor=


let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1

let g:javascript_conceal_function             = "ƒ"
let g:javascript_conceal_this                 = "@"
let g:javascript_conceal_return               = "讀"
let g:javascript_conceal_undefined            = "🍺 "
let g:javascript_conceal_arrow_function       = "ﰲ"


hi clear Conceal
hi Conceal ctermfg=9 ctermbg=none
set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*


let g:ycm_show_diagnostics_ui = 0
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_warning_symbol = '⚠'
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_goto_buffer_command = 'new-tab'

nmap <leader>gd :YcmCompleter GoToDefinition<CR>
nmap <leader>gr :YcmCompleter GoToReferences<CR>




"TODO: brew install checkbashisms
let g:syntastic_enable_signs=1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_aggregate_errors = 1
"TODO: npm i -g eslint
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_python_checkers = ['pylint']



"TODO Syntastic async ALE beer
let g:airline#extensions#ale#enabled = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error = '⚠'
let g:ale_sign_warning = '⚠'
let g:ale_echo_msg_error_str = 'err'
let g:ale_echo_msg_warning_str = 'warn'
let g:ale_echo_msg_format = '  - [%severity%][%linter%] %s '
let g:ale_sign_offset = 1
let g:ale_set_balloons = 1



set mouse=a
set ttymouse=sgr
set balloondelay=250
set ballooneval
set balloonevalterm
"TODO: test balloon funcion
":call balloon_show(bufname('%'))
"TODO: set ballon style for errors
"hi Pmenu ctermbg=1 ctermfg=255

let g:ale_enabled = 1
let g:ale_open_list = 1
let g:ale_keep_list_window_open = 0
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0
let g:ale_list_window_size = 5

let g:ale_lint_on_enter = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_text_changed = 'never'
let g:ale_fix_on_save = 1
let g:ale_lint_on_save = 1


let b:ale_fixers = ['prettier', 'eslint']
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'python': ['flake8'],
\   'go': ['go', 'golint', 'errcheck']
\}

hi ALEErrorSign ctermfg=1
hi ALEWarningSign ctermbg=NONE ctermfg=yellow
hi ALEErrorLine ctermfg=9
hi qfFileName ctermfg=9 cterm=bold
hi Type ctermfg=9 ctermbg=232




let NERDTreeShowHidden=0
let NERDTreeWinSize=24
let NERDTreeMinimalUI=1
let NERDTreeMinimalMenu=1
let NERDTreeStatusline='פּ Sources'
let g:NERDTreeMinimalUI=1
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

hi NERDTreeDirSlash ctermbg=0 ctermfg=0
hi NERDTreeDir cterm=bold ctermfg=239
hi NERDTreeFile ctermfg=240
hi NERDTreeFlags ctermfg=9
hi NERDTreeCWD ctermfg=235 cterm=bold ctermbg=0


"TODO: tagbar custom settings
"let g:tagbar_iconchars = ['+', '-']
"let g:tagbar_width = 30
"let g:tagbar_compact=1
"let g:tagbar_ctags_bin = "/usr/local/bin/ctags"
hi TagbarKind ctermbg=0 ctermfg=9 cterm=bold
hi TagbarType ctermfg=238
hi TagbarScope cterm=bold ctermfg=9
hi TagbarFoldIcon ctermbg=0 ctermfg=1 cterm=bold

hi VistaTag cterm=none ctermfg=9


"TODO npm i -g prettier@1.18.2
let g:prettier#autoformat = 0
"let g:prettier#exec_cmd_async = 1
"let g:prettier#config#parser = 'babylon'


hi LineNr ctermfg=236
hi StatusLine ctermfg=236 ctermbg=black
hi WildMenu ctermbg=16 ctermfg=1 cterm=bold
hi GitGutterAddDefault cterm=bold
hi GitGutterAddLine ctermbg=none
hi IndentGuidesOdd ctermbg=232
hi IndentGuidesEven ctermbg=236
hi Normal ctermbg=232
hi NonText ctermbg=black ctermfg=0
hi Comment ctermfg=236
hi LineNr ctermfg=236
hi CursorLineNr ctermfg=9 cterm=bold
hi CursorLine ctermbg=233
hi Search ctermbg=1
hi GitGutterAdd ctermfg=2
hi GitGutterChange ctermfg=3
hi GitGutterDelete ctermfg=1
hi GitGutterChangeDelete ctermfg=4
hi GitGutterDeleteLine ctermbg=none ctermfg=none
hi GitGutterChangeLine ctermbg=none ctermfg=none
hi ColorColumn ctermbg=233
hi SpecialKey ctermbg=none ctermfg=236
hi airline_tabsel ctermbg=235 ctermfg=250
" BLACK
"hi Pmenu ctermbg=black ctermfg=238
hi Pmenu ctermfg=239 ctermbg=234
hi PmenuSel cterm=bold ctermfg=232 ctermbg=9
hi PmenuSbar ctermfg=1 ctermbg=233
"hi airline_tab ctermfg=238 ctermbg=233
hi VertSplit ctermfg=233 ctermbg=0
hi Visual ctermbg=235
hi MatchParen ctermfg=3 cterm=bold ctermbg=236

"TODO menu light style
hi PmenuThumb ctermfg=239 ctermbg=236


"TODO menu dark style
"hi PmenuThumb ctermfg=1 ctermbg=black
let g:vista_default_executive = 'ctags'
let g:vista_fzf_preview = ['right:50%']
let g:vista#renderer#enable_icon = 1
let g:vista_fold_toggle_icons=['-', '+']
let g:vista#renderer#icons = {
\   "classes": "\uf898",
\   "constants": "\uf71b",
\   "function": "\ue00a",
\   "methods": "\ue620",
\   "variable": "\ue620",
\   "properties": "\ue620",
\   "commands": "\uf489",
\  }



let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=233
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=234


"let g:ultisnipsexpandtrigger = '<tab>'
"let g:ultisnipsjumpforwardtrigger = '<a-j>'
"let g:ultisnipsjumpbackwardtrigger = '<a-k>'
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>' " better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

let g:ultisnipseditsplit="vertical"
let g:ultisnipssnippetdirectories=['ultisnips', '/home/u0166409/.vim/snipp']


let g:DevIconsEnableFoldersOpenClose = 1